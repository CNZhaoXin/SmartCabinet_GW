package com.zk.cabinet.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zk.cabinet.bean.Cabinet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Cabinet".
*/
public class CabinetDao extends AbstractDao<Cabinet, Long> {

    public static final String TABLENAME = "Cabinet";

    /**
     * Properties of entity Cabinet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DeviceId");
        public final static Property Floor = new Property(2, int.class, "floor", false, "Floor");
        public final static Property Position = new Property(3, int.class, "position", false, "Position");
        public final static Property Proportion = new Property(4, int.class, "proportion", false, "Proportion");
        public final static Property AntennaNumber = new Property(5, int.class, "antennaNumber", false, "AntennaNumber");
    }


    public CabinetDao(DaoConfig config) {
        super(config);
    }
    
    public CabinetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Cabinet\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DeviceId\" TEXT," + // 1: deviceId
                "\"Floor\" INTEGER NOT NULL ," + // 2: floor
                "\"Position\" INTEGER NOT NULL ," + // 3: position
                "\"Proportion\" INTEGER NOT NULL ," + // 4: proportion
                "\"AntennaNumber\" INTEGER NOT NULL );"); // 5: antennaNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Cabinet\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cabinet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
        stmt.bindLong(3, entity.getFloor());
        stmt.bindLong(4, entity.getPosition());
        stmt.bindLong(5, entity.getProportion());
        stmt.bindLong(6, entity.getAntennaNumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cabinet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
        stmt.bindLong(3, entity.getFloor());
        stmt.bindLong(4, entity.getPosition());
        stmt.bindLong(5, entity.getProportion());
        stmt.bindLong(6, entity.getAntennaNumber());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cabinet readEntity(Cursor cursor, int offset) {
        Cabinet entity = new Cabinet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
            cursor.getInt(offset + 2), // floor
            cursor.getInt(offset + 3), // position
            cursor.getInt(offset + 4), // proportion
            cursor.getInt(offset + 5) // antennaNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cabinet entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFloor(cursor.getInt(offset + 2));
        entity.setPosition(cursor.getInt(offset + 3));
        entity.setProportion(cursor.getInt(offset + 4));
        entity.setAntennaNumber(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cabinet entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cabinet entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cabinet entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
