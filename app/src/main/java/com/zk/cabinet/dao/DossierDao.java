package com.zk.cabinet.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zk.cabinet.bean.Dossier;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Dossier".
*/
public class DossierDao extends AbstractDao<Dossier, Long> {

    public static final String TABLENAME = "Dossier";

    /**
     * Properties of entity Dossier.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property WebId = new Property(1, Long.class, "webId", false, "WebID");
        public final static Property CaseCode = new Property(2, String.class, "caseCode", false, "CaseCode");
        public final static Property CaseName = new Property(3, String.class, "caseName", false, "CaseName");
        public final static Property UserID = new Property(4, Long.class, "userID", false, "UserID");
        public final static Property UserCode = new Property(5, String.class, "userCode", false, "UserCode");
        public final static Property UserName = new Property(6, String.class, "userName", false, "UserName");
        public final static Property CorpCode = new Property(7, String.class, "corpCode", false, "CorpCode");
        public final static Property CorpName = new Property(8, String.class, "corpName", false, "CorpName");
        public final static Property ReceptionTime = new Property(9, String.class, "receptionTime", false, "ReceptionTime");
        public final static Property ModifyTime = new Property(10, String.class, "modifyTime", false, "ModifyTime");
        public final static Property Epc = new Property(11, String.class, "epc", false, "EPC");
        public final static Property CaseState = new Property(12, String.class, "caseState", false, "CaseState");
        public final static Property DeviceCode = new Property(13, String.class, "DeviceCode", false, "DeviceCode");
        public final static Property CellId = new Property(14, int.class, "cellId", false, "CellID");
        public final static Property CellName = new Property(15, String.class, "cellName", false, "CellName");
        public final static Property CellCode = new Property(16, int.class, "cellCode", false, "CellCode");
    }


    public DossierDao(DaoConfig config) {
        super(config);
    }
    
    public DossierDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Dossier\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WebID\" INTEGER UNIQUE ," + // 1: webId
                "\"CaseCode\" TEXT," + // 2: caseCode
                "\"CaseName\" TEXT," + // 3: caseName
                "\"UserID\" INTEGER," + // 4: userID
                "\"UserCode\" TEXT," + // 5: userCode
                "\"UserName\" TEXT," + // 6: userName
                "\"CorpCode\" TEXT," + // 7: corpCode
                "\"CorpName\" TEXT," + // 8: corpName
                "\"ReceptionTime\" TEXT," + // 9: receptionTime
                "\"ModifyTime\" TEXT," + // 10: modifyTime
                "\"EPC\" TEXT," + // 11: epc
                "\"CaseState\" TEXT," + // 12: caseState
                "\"DeviceCode\" TEXT," + // 13: DeviceCode
                "\"CellID\" INTEGER NOT NULL ," + // 14: cellId
                "\"CellName\" TEXT," + // 15: cellName
                "\"CellCode\" INTEGER NOT NULL );"); // 16: cellCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Dossier\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dossier entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long webId = entity.getWebId();
        if (webId != null) {
            stmt.bindLong(2, webId);
        }
 
        String caseCode = entity.getCaseCode();
        if (caseCode != null) {
            stmt.bindString(3, caseCode);
        }
 
        String caseName = entity.getCaseName();
        if (caseName != null) {
            stmt.bindString(4, caseName);
        }
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(5, userID);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(6, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
 
        String corpCode = entity.getCorpCode();
        if (corpCode != null) {
            stmt.bindString(8, corpCode);
        }
 
        String corpName = entity.getCorpName();
        if (corpName != null) {
            stmt.bindString(9, corpName);
        }
 
        String receptionTime = entity.getReceptionTime();
        if (receptionTime != null) {
            stmt.bindString(10, receptionTime);
        }
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(11, modifyTime);
        }
 
        String epc = entity.getEpc();
        if (epc != null) {
            stmt.bindString(12, epc);
        }
 
        String caseState = entity.getCaseState();
        if (caseState != null) {
            stmt.bindString(13, caseState);
        }
 
        String DeviceCode = entity.getDeviceCode();
        if (DeviceCode != null) {
            stmt.bindString(14, DeviceCode);
        }
        stmt.bindLong(15, entity.getCellId());
 
        String cellName = entity.getCellName();
        if (cellName != null) {
            stmt.bindString(16, cellName);
        }
        stmt.bindLong(17, entity.getCellCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dossier entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long webId = entity.getWebId();
        if (webId != null) {
            stmt.bindLong(2, webId);
        }
 
        String caseCode = entity.getCaseCode();
        if (caseCode != null) {
            stmt.bindString(3, caseCode);
        }
 
        String caseName = entity.getCaseName();
        if (caseName != null) {
            stmt.bindString(4, caseName);
        }
 
        Long userID = entity.getUserID();
        if (userID != null) {
            stmt.bindLong(5, userID);
        }
 
        String userCode = entity.getUserCode();
        if (userCode != null) {
            stmt.bindString(6, userCode);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(7, userName);
        }
 
        String corpCode = entity.getCorpCode();
        if (corpCode != null) {
            stmt.bindString(8, corpCode);
        }
 
        String corpName = entity.getCorpName();
        if (corpName != null) {
            stmt.bindString(9, corpName);
        }
 
        String receptionTime = entity.getReceptionTime();
        if (receptionTime != null) {
            stmt.bindString(10, receptionTime);
        }
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(11, modifyTime);
        }
 
        String epc = entity.getEpc();
        if (epc != null) {
            stmt.bindString(12, epc);
        }
 
        String caseState = entity.getCaseState();
        if (caseState != null) {
            stmt.bindString(13, caseState);
        }
 
        String DeviceCode = entity.getDeviceCode();
        if (DeviceCode != null) {
            stmt.bindString(14, DeviceCode);
        }
        stmt.bindLong(15, entity.getCellId());
 
        String cellName = entity.getCellName();
        if (cellName != null) {
            stmt.bindString(16, cellName);
        }
        stmt.bindLong(17, entity.getCellCode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Dossier readEntity(Cursor cursor, int offset) {
        Dossier entity = new Dossier( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // webId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // caseCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // caseName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // userID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // corpCode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // corpName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // receptionTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // modifyTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // epc
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // caseState
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // DeviceCode
            cursor.getInt(offset + 14), // cellId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // cellName
            cursor.getInt(offset + 16) // cellCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dossier entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWebId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCaseCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCaseName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserID(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setUserCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCorpCode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCorpName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReceptionTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setModifyTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEpc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCaseState(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDeviceCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCellId(cursor.getInt(offset + 14));
        entity.setCellName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCellCode(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Dossier entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Dossier entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Dossier entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
