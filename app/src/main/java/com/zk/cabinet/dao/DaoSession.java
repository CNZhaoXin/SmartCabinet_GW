package com.zk.cabinet.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.zk.cabinet.bean.Cabinet;
import com.zk.cabinet.bean.Device;
import com.zk.cabinet.bean.Dossier;
import com.zk.cabinet.bean.DossierOperating;
import com.zk.cabinet.bean.LightControlRecord;
import com.zk.cabinet.bean.User;

import com.zk.cabinet.dao.CabinetDao;
import com.zk.cabinet.dao.DeviceDao;
import com.zk.cabinet.dao.DossierDao;
import com.zk.cabinet.dao.DossierOperatingDao;
import com.zk.cabinet.dao.LightControlRecordDao;
import com.zk.cabinet.dao.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig cabinetDaoConfig;
    private final DaoConfig deviceDaoConfig;
    private final DaoConfig dossierDaoConfig;
    private final DaoConfig dossierOperatingDaoConfig;
    private final DaoConfig lightControlRecordDaoConfig;
    private final DaoConfig userDaoConfig;

    private final CabinetDao cabinetDao;
    private final DeviceDao deviceDao;
    private final DossierDao dossierDao;
    private final DossierOperatingDao dossierOperatingDao;
    private final LightControlRecordDao lightControlRecordDao;
    private final UserDao userDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        cabinetDaoConfig = daoConfigMap.get(CabinetDao.class).clone();
        cabinetDaoConfig.initIdentityScope(type);

        deviceDaoConfig = daoConfigMap.get(DeviceDao.class).clone();
        deviceDaoConfig.initIdentityScope(type);

        dossierDaoConfig = daoConfigMap.get(DossierDao.class).clone();
        dossierDaoConfig.initIdentityScope(type);

        dossierOperatingDaoConfig = daoConfigMap.get(DossierOperatingDao.class).clone();
        dossierOperatingDaoConfig.initIdentityScope(type);

        lightControlRecordDaoConfig = daoConfigMap.get(LightControlRecordDao.class).clone();
        lightControlRecordDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        cabinetDao = new CabinetDao(cabinetDaoConfig, this);
        deviceDao = new DeviceDao(deviceDaoConfig, this);
        dossierDao = new DossierDao(dossierDaoConfig, this);
        dossierOperatingDao = new DossierOperatingDao(dossierOperatingDaoConfig, this);
        lightControlRecordDao = new LightControlRecordDao(lightControlRecordDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);

        registerDao(Cabinet.class, cabinetDao);
        registerDao(Device.class, deviceDao);
        registerDao(Dossier.class, dossierDao);
        registerDao(DossierOperating.class, dossierOperatingDao);
        registerDao(LightControlRecord.class, lightControlRecordDao);
        registerDao(User.class, userDao);
    }
    
    public void clear() {
        cabinetDaoConfig.clearIdentityScope();
        deviceDaoConfig.clearIdentityScope();
        dossierDaoConfig.clearIdentityScope();
        dossierOperatingDaoConfig.clearIdentityScope();
        lightControlRecordDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
    }

    public CabinetDao getCabinetDao() {
        return cabinetDao;
    }

    public DeviceDao getDeviceDao() {
        return deviceDao;
    }

    public DossierDao getDossierDao() {
        return dossierDao;
    }

    public DossierOperatingDao getDossierOperatingDao() {
        return dossierOperatingDao;
    }

    public LightControlRecordDao getLightControlRecordDao() {
        return lightControlRecordDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

}
