package com.zk.cabinet.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zk.cabinet.bean.DossierOperating;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DossierOperating".
*/
public class DossierOperatingDao extends AbstractDao<DossierOperating, Long> {

    public static final String TABLENAME = "DossierOperating";

    /**
     * Properties of entity DossierOperating.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property WarrantNum = new Property(1, String.class, "warrantNum", false, "WarrantNum");
        public final static Property RfidNum = new Property(2, String.class, "rfidNum", false, "RfidNum");
        public final static Property WarrantName = new Property(3, String.class, "warrantName", false, "WarrantName");
        public final static Property WarrantNo = new Property(4, String.class, "warrantNo", false, "WarrantNo");
        public final static Property WarranCate = new Property(5, String.class, "warranCate", false, "WarranCate");
        public final static Property OperatingType = new Property(6, int.class, "operatingType", false, "OperatingType");
        public final static Property WarranType = new Property(7, int.class, "warranType", false, "WarranType");
        public final static Property CabinetId = new Property(8, String.class, "cabinetId", false, "CabinetId");
        public final static Property Floor = new Property(9, int.class, "floor", false, "Floor");
        public final static Property Light = new Property(10, int.class, "light", false, "Light");
        public final static Property Selected = new Property(11, boolean.class, "selected", false, "Selected");
    }


    public DossierOperatingDao(DaoConfig config) {
        super(config);
    }
    
    public DossierOperatingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DossierOperating\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WarrantNum\" TEXT," + // 1: warrantNum
                "\"RfidNum\" TEXT," + // 2: rfidNum
                "\"WarrantName\" TEXT," + // 3: warrantName
                "\"WarrantNo\" TEXT," + // 4: warrantNo
                "\"WarranCate\" TEXT," + // 5: warranCate
                "\"OperatingType\" INTEGER NOT NULL ," + // 6: operatingType
                "\"WarranType\" INTEGER NOT NULL ," + // 7: warranType
                "\"CabinetId\" TEXT," + // 8: cabinetId
                "\"Floor\" INTEGER NOT NULL ," + // 9: floor
                "\"Light\" INTEGER NOT NULL ," + // 10: light
                "\"Selected\" INTEGER NOT NULL );"); // 11: selected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DossierOperating\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DossierOperating entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String warrantNum = entity.getWarrantNum();
        if (warrantNum != null) {
            stmt.bindString(2, warrantNum);
        }
 
        String rfidNum = entity.getRfidNum();
        if (rfidNum != null) {
            stmt.bindString(3, rfidNum);
        }
 
        String warrantName = entity.getWarrantName();
        if (warrantName != null) {
            stmt.bindString(4, warrantName);
        }
 
        String warrantNo = entity.getWarrantNo();
        if (warrantNo != null) {
            stmt.bindString(5, warrantNo);
        }
 
        String warranCate = entity.getWarranCate();
        if (warranCate != null) {
            stmt.bindString(6, warranCate);
        }
        stmt.bindLong(7, entity.getOperatingType());
        stmt.bindLong(8, entity.getWarranType());
 
        String cabinetId = entity.getCabinetId();
        if (cabinetId != null) {
            stmt.bindString(9, cabinetId);
        }
        stmt.bindLong(10, entity.getFloor());
        stmt.bindLong(11, entity.getLight());
        stmt.bindLong(12, entity.getSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DossierOperating entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String warrantNum = entity.getWarrantNum();
        if (warrantNum != null) {
            stmt.bindString(2, warrantNum);
        }
 
        String rfidNum = entity.getRfidNum();
        if (rfidNum != null) {
            stmt.bindString(3, rfidNum);
        }
 
        String warrantName = entity.getWarrantName();
        if (warrantName != null) {
            stmt.bindString(4, warrantName);
        }
 
        String warrantNo = entity.getWarrantNo();
        if (warrantNo != null) {
            stmt.bindString(5, warrantNo);
        }
 
        String warranCate = entity.getWarranCate();
        if (warranCate != null) {
            stmt.bindString(6, warranCate);
        }
        stmt.bindLong(7, entity.getOperatingType());
        stmt.bindLong(8, entity.getWarranType());
 
        String cabinetId = entity.getCabinetId();
        if (cabinetId != null) {
            stmt.bindString(9, cabinetId);
        }
        stmt.bindLong(10, entity.getFloor());
        stmt.bindLong(11, entity.getLight());
        stmt.bindLong(12, entity.getSelected() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DossierOperating readEntity(Cursor cursor, int offset) {
        DossierOperating entity = new DossierOperating( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // warrantNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rfidNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // warrantName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // warrantNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // warranCate
            cursor.getInt(offset + 6), // operatingType
            cursor.getInt(offset + 7), // warranType
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cabinetId
            cursor.getInt(offset + 9), // floor
            cursor.getInt(offset + 10), // light
            cursor.getShort(offset + 11) != 0 // selected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DossierOperating entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWarrantNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRfidNum(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWarrantName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWarrantNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWarranCate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOperatingType(cursor.getInt(offset + 6));
        entity.setWarranType(cursor.getInt(offset + 7));
        entity.setCabinetId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFloor(cursor.getInt(offset + 9));
        entity.setLight(cursor.getInt(offset + 10));
        entity.setSelected(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DossierOperating entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DossierOperating entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DossierOperating entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
